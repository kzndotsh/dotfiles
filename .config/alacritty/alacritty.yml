# alacritty.yml

#import:
#  - /path/to/alacritty.yml

env:
  TERM: alacritty

window:
  #dimensions:
  #  columns: 0
  #  lines: 0

  #position:
  #  x: 0
  #  y: 0

  padding:
    x: 6
    y: 6

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: true

  decorations: none

  opacity: 0.9

  title: Alacritty
  dynamic_title: true
  class:
    instance: Alacritty
    general: Alacritty

  decorations_theme_variant: None

  #resize_increments: false

scrolling:
  history: 10000
  #multiplier: 3

font:
  normal:
    family: JetBrainsMono Nerd Font Mono
    style: Regular
  bold:
    family: JetBrainsMono Nerd Font Mono
    style: Bold
  italic:
    family: JetBrainsMono Nerd Font Mono
    style: Italic
  bold_italic:
    family: JetBrainsMono Nerd Font Mono
    style: Bold Italic
  size: 14.0

  offset:
    x: 1
    y: 1

  #glyph_offset:
  #  x: 0
  #  y: 0

  builtin_box_drawing: true

draw_bold_text_with_bright_colors: true

colors:
  primary:
    background: '#1a1b26'
    foreground: '#a9b1d6'

      # Bright and dim foreground colors
      # The dimmed foreground color is calculated automatically if it is not
      # present. If the bright foreground color is not set, or
      # `draw_bold_text_with_bright_colors` is `false`, the normal foreground
      # color will be used.

      #dim_foreground: '#828482'
      #bright_foreground: '#eaeaea'

  # Cursor colors
  # Colors which should be used to draw the terminal cursor.
  # Allowed values are CellForeground/CellBackground, which reference the
  # affected cell, or hexadecimal colors like #ff00ff.

  #cursor:
  #  text: CellBackground
  #  cursor: CellForeground

  # Vi mode cursor colors
  # Colors for the cursor when the vi mode is active.
  # Allowed values are CellForeground/CellBackground, which reference the
  # affected cell, or hexadecimal colors like #ff00ff.

  #vi_mode_cursor:
  #  text: CellBackground
  #  cursor: CellForeground

  # Search colors
  # Colors used for the search bar and match highlighting.

  #search:
  # Allowed values are CellForeground/CellBackground, which reference the
  # affected cell, or hexadecimal colors like #ff00ff.
  #matches:
  #  foreground: '#000000'
  #  background: '#ffffff'
  #focused_match:
  #  foreground: '#ffffff'
  #  background: '#000000'

  #hints:
  # First character in the hint label
  # Allowed values are CellForeground/CellBackground, which reference the
  # affected cell, or hexadecimal colors like #ff00ff.

  #start:
  #  foreground: '#1d1f21'
  #  background: '#e9ff5e'

  # All characters after the first one in the hint label
  # Allowed values are CellForeground/CellBackground, which reference the
  # affected cell, or hexadecimal colors like #ff00ff.

  #end:
  #  foreground: '#e9ff5e'
  #  background: '#1d1f21'

  # Line indicator
  # Color used for the indicator displaying the position in history during
  # search and vi mode.
  # By default, these will use the opposing primary color.

  #line_indicator:
  #  foreground: None
  #  background: None

  # Footer bar
  # Color used for the footer bar on the bottom, used by search regex input,
  # hyperlink URI preview, etc.

  #footer_bar:
  #  background: '#c5c8c6'
  #  foreground: '#1d1f21'

  # Selection colors
  # Allowed values are CellForeground/CellBackground, which reference the
  # affected cell, or hexadecimal colors like #ff00ff.

  #selection:
  #  text: CellBackground
  #  background: CellForeground

  # Normal colors
  normal:
    black: '#32344a'
    red: '#f7768e'
    green: '#9ece6a'
    yellow: '#e0af68'
    blue: '#7aa2f7'
    magenta: '#ad8ee6'
    cyan: '#449dab'
    white: '#787c99'

  # Bright colors
  bright:
    black: '#444b6a'
    red: '#ff7a93'
    green: '#b9f27c'
    yellow: '#ff9e64'
    blue: '#7da6ff'
    magenta: '#bb9af7'
    cyan: '#0db9d7'
    white: '#acb0d0'

  #dim:
  #  black:   '#131415'
  #  red:     '#864343'
  #  green:   '#777c44'
  #  yellow:  '#9e824c'
  #  blue:    '#556a7d'
  #  magenta: '#75617b'
  #  cyan:    '#5b7d78'
  #  white:   '#828482'

  #indexed_colors: []

  #transparent_background_colors: false

#bell:
#animation: EaseOutExpo
#duration: 0
#color: '#ffffff'
#command: None

selection:
  #semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"
  save_to_clipboard: true

cursor:
  style:
    #   - ▇ Block
    #   - _ Underline
    #   - | Beam
    shape: Block
    #   - Never: Prevent the cursor from ever blinking
    #   - Off: Disable blinking by default
    #   - On: Enable blinking by default
    #   - Always: Force the cursor to always blink
    blinking: On

  #vi_mode_style: None

  #blink_interval: 750
  #blink_timeout: 5

  unfocused_hollow: true

  #thickness: 0.15

live_config_reload: true

#shell:
#  program: /bin/bash
#  args:
#    - --login

#working_directory: None

# Offer IPC using `alacritty msg` (unix only)
ipc_socket: true
#mouse:
#double_click: { threshold: 300 }
#triple_click: { threshold: 300 }
#hide_when_typing: false

#hints:
# Keys used for the hint labels.
#alphabet: "jfkdls;ahgurieowpq"

# List with all available hints
#
# Each hint must have any of `regex` or `hyperlinks` field and either an
# `action` or a `command` field. The fields `mouse`, `binding` and
# `post_processing` are optional.
#
# The `hyperlinks` option will cause OSC 8 escape sequence hyperlinks to be
# highlighted.
#
# The fields `command`, `binding.key`, `binding.mods`, `binding.mode` and
# `mouse.mods` accept the same values as they do in the `key_bindings` section.
#
# The `mouse.enabled` field controls if the hint should be underlined while
# the mouse with all `mouse.mods` keys held or the vi mode cursor is above it.
#
# If the `post_processing` field is set to `true`, heuristics will be used to
# shorten the match if there are characters likely not to be part of the hint
# (e.g. a trailing `.`). This is most useful for URIs and applies only to
# `regex` matches.
#
# Values for `action`:
#   - Copy
#       Copy the hint's text to the clipboard.
#   - Paste
#       Paste the hint's text to the terminal or search.
#   - Select
#       Select the hint's text.
#   - MoveViModeCursor
#       Move the vi mode cursor to the beginning of the hint.

#enabled:
# - regex: "(ipfs:|ipns:|magnet:|mailto:|gemini:|gopher:|https:|http:|news:|file:|git:|ssh:|ftp:)\
#           [^\u0000-\u001F\u007F-\u009F<>\"\\s{-}\\^⟨⟩`]+"
#   hyperlinks: true
#   command: xdg-open
#   post_processing: true
#   mouse:
#     enabled: true
#     mods: None
#   binding:
#     key: U
#     mods: Control|Shift

# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# To trigger mouse bindings when an application running within Alacritty
# captures the mouse, the `Shift` modifier is automatically added as a
# requirement.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings for actions not exclusive to mouse mode)
#
# - Mouse exclusive actions:
#
#   - ExpandSelection
#       Expand the selection to the current mouse cursor location.
#
# And optionally:
#
# - `mods` (see key bindings)

#mouse_bindings:
#  - { mouse: Right,                 action: ExpandSelection }
#  - { mouse: Right,  mods: Control, action: ExpandSelection }
#  - { mouse: Middle, mode: ~Vi,     action: PasteSelection  }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/winit/*/winit/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - ToggleViMode
#   - SearchForward
#       Start searching toward the right of the search origin.
#   - SearchBackward
#       Start searching toward the left of the search origin.
#   - Copy
#   - Paste
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollHalfPageUp
#   - ScrollHalfPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#       Remove the terminal's scrollback history.
#   - Hide
#       Hide the Alacritty window.
#   - Minimize
#       Minimize the Alacritty window.
#   - Quit
#       Quit Alacritty.
#   - ToggleFullscreen
#   - ToggleMaximized
#   - SpawnNewInstance
#       Spawn a new instance of Alacritty.
#   - CreateNewWindow
#       Create a new Alacritty window from the current process.
#   - ClearLogNotice
#       Clear Alacritty's UI warning and error notice.
#   - ClearSelection
#       Remove the active selection.
#   - ReceiveChar
#   - None
#
# - Vi mode exclusive actions:
#
#   - Open
#       Perform the action of the first matching hint under the vi mode cursor
#       with `mouse.enabled` set to `true`.
#   - ToggleNormalSelection
#   - ToggleLineSelection
#   - ToggleBlockSelection
#   - ToggleSemanticSelection
#       Toggle semantic selection based on `selection.semantic_escape_chars`.
#   - CenterAroundViCursor
#       Center view around vi mode cursor
#
# - Vi mode exclusive cursor motion actions:
#
#   - Up
#       One line up.
#   - Down
#       One line down.
#   - Left
#       One character left.
#   - Right
#       One character right.
#   - First
#       First column, or beginning of the line when already at the first column.
#   - Last
#       Last column, or beginning of the line when already at the last column.
#   - FirstOccupied
#       First non-empty cell in this terminal row, or first non-empty cell of
#       the line when already at the first cell of the row.
#   - High
#       Top of the screen.
#   - Middle
#       Center of the screen.
#   - Low
#       Bottom of the screen.
#   - SemanticLeft
#       Start of the previous semantically separated word.
#   - SemanticRight
#       Start of the next semantically separated word.
#   - SemanticLeftEnd
#       End of the previous semantically separated word.
#   - SemanticRightEnd
#       End of the next semantically separated word.
#   - WordLeft
#       Start of the previous whitespace separated word.
#   - WordRight
#       Start of the next whitespace separated word.
#   - WordLeftEnd
#       End of the previous whitespace separated word.
#   - WordRightEnd
#       End of the next whitespace separated word.
#   - Bracket
#       Character matching the bracket at the cursor's location.
#   - SearchNext
#       Beginning of the next match.
#   - SearchPrevious
#       Beginning of the previous match.
#   - SearchStart
#       Start of the match to the left of the vi mode cursor.
#   - SearchEnd
#       End of the match to the right of the vi mode cursor.
#
# - Search mode exclusive actions:
#   - SearchFocusNext
#       Move the focus to the next search match.
#   - SearchFocusPrevious
#       Move the focus to the previous search match.
#   - SearchConfirm
#   - SearchCancel
#   - SearchClear
#       Reset the search regex.
#   - SearchDeleteWord
#       Delete the last word in the search regex.
#   - SearchHistoryPrevious
#       Go to the previous regex in the search history.
#   - SearchHistoryNext
#       Go to the next regex in the search history.
#
# - Linux/BSD exclusive actions:
#
#   - CopySelection
#       Copy from the selection buffer.
#   - PasteSelection
#       Paste from the selection buffer.
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Search
#    - Alt
#    - Vi
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# in the order they were defined in.

#key_bindings:
#- { key: Paste,                                       action: Paste          }
#- { key: Copy,                                        action: Copy           }
#- { key: L,         mods: Control,                    action: ClearLogNotice }
#- { key: L,         mods: Control, mode: ~Vi|~Search, chars: "\x0c"          }
#- { key: PageUp,    mods: Shift,   mode: ~Alt,        action: ScrollPageUp   }
#- { key: PageDown,  mods: Shift,   mode: ~Alt,        action: ScrollPageDown }
#- { key: Home,      mods: Shift,   mode: ~Alt,        action: ScrollToTop    }
#- { key: End,       mods: Shift,   mode: ~Alt,        action: ScrollToBottom }

# Vi Mode
#- { key: Space,  mods: Shift|Control, mode: ~Search,    action: ToggleViMode            }
#- { key: Space,  mods: Shift|Control, mode: Vi|~Search, action: ScrollToBottom          }
#- { key: Escape,                      mode: Vi|~Search, action: ClearSelection          }
#- { key: I,                           mode: Vi|~Search, action: ToggleViMode            }
#- { key: I,                           mode: Vi|~Search, action: ScrollToBottom          }
#- { key: C,      mods: Control,       mode: Vi|~Search, action: ToggleViMode            }
#- { key: Y,      mods: Control,       mode: Vi|~Search, action: ScrollLineUp            }
#- { key: E,      mods: Control,       mode: Vi|~Search, action: ScrollLineDown          }
#- { key: G,                           mode: Vi|~Search, action: ScrollToTop             }
#- { key: G,      mods: Shift,         mode: Vi|~Search, action: ScrollToBottom          }
#- { key: B,      mods: Control,       mode: Vi|~Search, action: ScrollPageUp            }
#- { key: F,      mods: Control,       mode: Vi|~Search, action: ScrollPageDown          }
#- { key: U,      mods: Control,       mode: Vi|~Search, action: ScrollHalfPageUp        }
#- { key: D,      mods: Control,       mode: Vi|~Search, action: ScrollHalfPageDown      }
#- { key: Y,                           mode: Vi|~Search, action: Copy                    }
#- { key: Y,                           mode: Vi|~Search, action: ClearSelection          }
#- { key: Copy,                        mode: Vi|~Search, action: ClearSelection          }
#- { key: V,                           mode: Vi|~Search, action: ToggleNormalSelection   }
#- { key: V,      mods: Shift,         mode: Vi|~Search, action: ToggleLineSelection     }
#- { key: V,      mods: Control,       mode: Vi|~Search, action: ToggleBlockSelection    }
#- { key: V,      mods: Alt,           mode: Vi|~Search, action: ToggleSemanticSelection }
#- { key: Return,                      mode: Vi|~Search, action: Open                    }
#- { key: Z,                           mode: Vi|~Search, action: CenterAroundViCursor    }
#- { key: K,                           mode: Vi|~Search, action: Up                      }
#- { key: J,                           mode: Vi|~Search, action: Down                    }
#- { key: H,                           mode: Vi|~Search, action: Left                    }
#- { key: L,                           mode: Vi|~Search, action: Right                   }
#- { key: Up,                          mode: Vi|~Search, action: Up                      }
#- { key: Down,                        mode: Vi|~Search, action: Down                    }
#- { key: Left,                        mode: Vi|~Search, action: Left                    }
#- { key: Right,                       mode: Vi|~Search, action: Right                   }
#- { key: Key0,                        mode: Vi|~Search, action: First                   }
#- { key: Key4,   mods: Shift,         mode: Vi|~Search, action: Last                    }
#- { key: Key6,   mods: Shift,         mode: Vi|~Search, action: FirstOccupied           }
#- { key: H,      mods: Shift,         mode: Vi|~Search, action: High                    }
#- { key: M,      mods: Shift,         mode: Vi|~Search, action: Middle                  }
#- { key: L,      mods: Shift,         mode: Vi|~Search, action: Low                     }
#- { key: B,                           mode: Vi|~Search, action: SemanticLeft            }
#- { key: W,                           mode: Vi|~Search, action: SemanticRight           }
#- { key: E,                           mode: Vi|~Search, action: SemanticRightEnd        }
#- { key: B,      mods: Shift,         mode: Vi|~Search, action: WordLeft                }
#- { key: W,      mods: Shift,         mode: Vi|~Search, action: WordRight               }
#- { key: E,      mods: Shift,         mode: Vi|~Search, action: WordRightEnd            }
#- { key: Key5,   mods: Shift,         mode: Vi|~Search, action: Bracket                 }
#- { key: Slash,                       mode: Vi|~Search, action: SearchForward           }
#- { key: Slash,  mods: Shift,         mode: Vi|~Search, action: SearchBackward          }
#- { key: N,                           mode: Vi|~Search, action: SearchNext              }
#- { key: N,      mods: Shift,         mode: Vi|~Search, action: SearchPrevious          }

# Search Mode
#- { key: Return,                mode: Search|Vi,  action: SearchConfirm         }
#- { key: Escape,                mode: Search,     action: SearchCancel          }
#- { key: C,      mods: Control, mode: Search,     action: SearchCancel          }
#- { key: U,      mods: Control, mode: Search,     action: SearchClear           }
#- { key: W,      mods: Control, mode: Search,     action: SearchDeleteWord      }
#- { key: P,      mods: Control, mode: Search,     action: SearchHistoryPrevious }
#- { key: N,      mods: Control, mode: Search,     action: SearchHistoryNext     }
#- { key: Up,                    mode: Search,     action: SearchHistoryPrevious }
#- { key: Down,                  mode: Search,     action: SearchHistoryNext     }
#- { key: Return,                mode: Search|~Vi, action: SearchFocusNext       }
#- { key: Return, mods: Shift,   mode: Search|~Vi, action: SearchFocusPrevious   }

# (Windows, Linux, and BSD only)
#- { key: V,              mods: Control|Shift, mode: ~Vi,        action: Paste            }
#- { key: C,              mods: Control|Shift,                   action: Copy             }
#- { key: F,              mods: Control|Shift, mode: ~Search,    action: SearchForward    }
#- { key: B,              mods: Control|Shift, mode: ~Search,    action: SearchBackward   }
#- { key: C,              mods: Control|Shift, mode: Vi|~Search, action: ClearSelection   }
#- { key: Insert,         mods: Shift,                           action: PasteSelection   }
#- { key: Key0,           mods: Control,                         action: ResetFontSize    }
#- { key: Equals,         mods: Control,                         action: IncreaseFontSize }
#- { key: Plus,           mods: Control,                         action: IncreaseFontSize }
#- { key: NumpadAdd,      mods: Control,                         action: IncreaseFontSize }
#- { key: Minus,          mods: Control,                         action: DecreaseFontSize }
#- { key: NumpadSubtract, mods: Control,                         action: DecreaseFontSize }

#debug:
#render_timer: false
#persistent_logging: false
#log_level: Warn
#renderer: None
#print_events: false
#highlight_damage: false
